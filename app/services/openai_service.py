"""
Service OpenAI pour DevPlan AI Generator

Ce service g√®re toutes les interactions avec l'API OpenAI
"""

from openai import OpenAI
import os
import json
from typing import Dict, List, Optional, Any
from flask import current_app
from ..utils.exceptions import OpenAIException, ConfigurationException


class OpenAIService:
    """Service pour g√©rer les interactions avec OpenAI"""
    
    def __init__(self):
        self.client = None
        self.model = None
        self._initialize_client()
    
    def _initialize_client(self):
        """Initialise le client OpenAI avec la configuration"""
        try:
            api_key = current_app.config.get('OPENAI_API_KEY')
            if not api_key:
                raise ConfigurationException(
                    "Cl√© API OpenAI manquante. Veuillez configurer OPENAI_API_KEY.",
                    setting="OPENAI_API_KEY"
                )
            
            # Configuration du client OpenAI (nouvelle API v1.0+)
            self.client = OpenAI(
                api_key=api_key,
                organization=current_app.config.get('OPENAI_ORGANIZATION')
            )
            
            self.model = current_app.config.get('OPENAI_MODEL', 'gpt-3.5-turbo')
            
            current_app.logger.info(f"‚úÖ Client OpenAI initialis√© avec le mod√®le: {self.model}")
            
        except Exception as e:
            current_app.logger.error(f"‚ùå Erreur initialisation OpenAI: {str(e)}")
            raise ConfigurationException(f"Impossible d'initialiser OpenAI: {str(e)}")
    
    def test_connection(self) -> Dict[str, Any]:
        """
        Teste la connexion √† OpenAI
        
        Returns:
            Dict contenant le statut et les informations de connexion
        """
        try:
            # Test simple avec une requ√™te minimale
            response = self.client.chat.completions.create(
                model=self.model,
                messages=[
                    {"role": "user", "content": "Test de connexion - r√©pondez simplement 'OK'"}
                ],
                max_tokens=10,
                temperature=0
            )
            
            return {
                "status": "success",
                "message": "Connexion OpenAI r√©ussie",
                "model": self.model,
                "response": response.choices[0].message.content.strip(),
                "usage": {
                    "prompt_tokens": response.usage.prompt_tokens,
                    "completion_tokens": response.usage.completion_tokens,
                    "total_tokens": response.usage.total_tokens
                }
            }
            
        except Exception as e:
            error_msg = str(e)
            
            # Gestion des erreurs sp√©cifiques OpenAI
            if "authentication" in error_msg.lower() or "api_key" in error_msg.lower():
                raise OpenAIException(
                    "Erreur d'authentification OpenAI. V√©rifiez votre cl√© API.",
                    code="AUTH_ERROR"
                )
            elif "rate_limit" in error_msg.lower() or "quota" in error_msg.lower():
                raise OpenAIException(
                    "Limite de taux OpenAI atteinte. R√©essayez plus tard.",
                    code="RATE_LIMIT_ERROR"
                )
            elif "model" in error_msg.lower():
                raise OpenAIException(
                    f"Mod√®le non disponible: {self.model}",
                    code="MODEL_ERROR",
                    details=error_msg
                )
            else:
                raise OpenAIException(
                    f"Erreur inattendue lors du test de connexion: {error_msg}",
                    code="UNKNOWN_ERROR",
                    details=error_msg
                )
    
    def generate_development_plan(self, project_description: str, requirements: Dict[str, Any]) -> Dict[str, Any]:
        """
        G√©n√®re un plan de d√©veloppement bas√© sur la description du projet
        
        Args:
            project_description: Description du projet
            requirements: Exigences et sp√©cifications
            
        Returns:
            Dict contenant le plan de d√©veloppement g√©n√©r√©
        """
        try:
            # Construction du prompt pour la g√©n√©ration du plan
            prompt = self._build_development_plan_prompt(project_description, requirements)
            
            response = self.client.chat.completions.create(
                model=self.model,
                messages=[
                    {
                        "role": "system", 
                        "content": "Tu es un expert en gestion de projet et d√©veloppement logiciel. Tu g√©n√®res des plans de d√©veloppement structur√©s et d√©taill√©s."
                    },
                    {"role": "user", "content": prompt}
                ],
                max_tokens=2000,
                temperature=0.7,
                presence_penalty=0.1,
                frequency_penalty=0.1
            )
            
            plan_content = response.choices[0].message.content
            
            return {
                "status": "success",
                "plan": plan_content,
                "metadata": {
                    "model": self.model,
                    "tokens_used": response.usage.total_tokens,
                    "project_description": project_description,
                    "requirements": requirements
                }
            }
            
        except Exception as e:
            current_app.logger.error(f"Erreur g√©n√©ration plan: {str(e)}")
            raise OpenAIException(
                f"Erreur lors de la g√©n√©ration du plan: {str(e)}",
                code="GENERATION_ERROR",
                details=str(e)
            )
    
    def _build_development_plan_prompt(self, description: str, requirements: Dict[str, Any]) -> str:
        """
        Construit le prompt pour la g√©n√©ration du plan de d√©veloppement
        
        Args:
            description: Description du projet
            requirements: Exigences du projet
            
        Returns:
            Prompt format√© pour OpenAI
        """
        prompt = f"""
G√©n√®re un plan de d√©veloppement complet pour le projet suivant :

## Description du Projet
{description}

## Exigences
"""
        
        # Ajout des exigences au prompt
        if requirements.get('technology_stack'):
            prompt += f"\n**Stack Technologique :** {', '.join(requirements['technology_stack'])}"
        
        if requirements.get('timeline'):
            prompt += f"\n**Timeline :** {requirements['timeline']}"
        
        if requirements.get('team_size'):
            prompt += f"\n**Taille d'√©quipe :** {requirements['team_size']} d√©veloppeurs"
        
        if requirements.get('budget'):
            prompt += f"\n**Budget :** {requirements['budget']}"
        
        if requirements.get('features'):
            prompt += f"\n**Fonctionnalit√©s cl√©s :** {', '.join(requirements['features'])}"
        
        prompt += """

## Format de R√©ponse Attendu

G√©n√®re un plan structur√© avec les sections suivantes :

### 1. üìã Analyse du Projet
- Objectifs principaux
- D√©fis identifi√©s
- Opportunit√©s

### 2. üèóÔ∏è Architecture Technique
- Stack technologique recommand√©e
- Architecture syst√®me
- Choix de base de donn√©es

### 3. üìÖ Planning de D√©veloppement
- Phases du projet
- Jalons importants
- Timeline d√©taill√©e

### 4. üë• Organisation de l'√âquipe
- R√¥les et responsabilit√©s
- Comp√©tences requises
- Structure de collaboration

### 5. üöÄ Strat√©gie de D√©ploiement
- Environnements
- CI/CD
- Monitoring

### 6. üìä Gestion des Risques
- Risques identifi√©s
- Plans de mitigation
- Contingences

### 7. üí∞ Estimation Budg√©taire
- Co√ªts de d√©veloppement
- Infrastructure
- Maintenance

Sois pr√©cis, pratique et actionnable dans tes recommandations.
"""
        
        return prompt
    
    def get_model_info(self) -> Dict[str, Any]:
        """
        Retourne les informations sur le mod√®le utilis√©
        
        Returns:
            Dict avec les informations du mod√®le
        """
        return {
            "model": self.model,
            "api_key_configured": bool(current_app.config.get('OPENAI_API_KEY')),
            "organization": current_app.config.get('OPENAI_ORGANIZATION'),
            "status": "configured" if self.client else "not_configured"
        } 